# coding: utf-8

########################################################################################################################################################################
# BODY + ENVIRONMENTAL PARAMETERS FOR VISCOELASTIC BODY MODEL SIMULATIONS ##############################################################################################
########################################################################################################################################################################
########################################################################################################################################################################
########################################################################################################################################################################

import os
import numpy as np
import scipy.io as sio

from scipy import interpolate

from dynworm import sys_paths as paths

""" Define muscle maps and their inverses """

os.chdir(paths.muscle_map_dir)

mm1 = sio.loadmat('muscle_map_weight_gaba.mat')
muscle_map_f = mm1['muscle_map']

mm2 = sio.loadmat('alm_muscle_map_test.mat')
muscle_map_b = mm2['alm_muscle_map']

muscle_map_f = np.vstack([muscle_map_f, muscle_map_f[94, :]])
muscle_map_f[94, :] = 0

muscle_map_b = np.vstack([muscle_map_b, muscle_map_b[94, :]])
muscle_map_b[94, :] = 0

muscle_map_pseudoinv_f = np.linalg.pinv(muscle_map_f)
muscle_map_pseudoinv_b = np.linalg.pinv(muscle_map_b)

os.chdir(paths.default_dir)

########################################################################################################################################################################
# RADII FOR BODY SEGMENTS ##############################################################################################################################################
########################################################################################################################################################################
########################################################################################################################################################################
########################################################################################################################################################################

seg_lengths = np.asarray([0.2, 0.3, 0.5, 0.4, 0.6, 0.4, 0.7, 0.6, 0.9, 0.6, 1.1, 0.8, 1, 0.8, 1, 1.1, 0.8, 0.7, 1, 1.1, 0.5, 0.8, 0.9, 0.8])
h = np.asarray([0.6, 0.7, 0.8, 0.9, 1, 1, 1, 1.05, 1.05, 1.1, 1.1, 1.1, 1.05, 1.05, 1, 1, 1, 1, 0.9, 0.8, 0.65, 0.5, 0.35, 0.2])
h_compute = np.asarray([1, 1, 1, 1, 1, 1, 1, 1., 1., 1., 1., 1., 1., 1., 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
h_interpolate = interpolate.interp1d(np.arange(0, 24), h, axis=0, fill_value = "extrapolate")

########################################################################################################################################################################
# PARAMETERS FOR VISCO-ELASTIC ROD MODEL ###############################################################################################################################
########################################################################################################################################################################
########################################################################################################################################################################
########################################################################################################################################################################

init_key_counts = 20

higher_fluid_density_default = {

    "name" : "higher_fluid_density_default",
    "musclesType" : 'GABA',
    "scaled_factor" : 6000., #default 2200, 1130 (for 70000), 1230 (for 90000) #Muscle activity scaling
    "segments_count" : 24,
    "E" : 600000., # default 178000, 171000, 70000, 90000, #Young's modulus/flexural rigidity, Experimental measurment showed 4000
    "damping" : 0, # Force damping
    "rho" : 2, # default = 1, 7 for E = 70000, 10 for E = 90000 # Volumetric material density
    "rho_f" : 2, # default = 10 # Fluid density 
    "mu" : 0.01, # default = 0.01 # Viscosity #0.001 - 0.012
    "a" : 0.325 * h_compute, #C rossectional radius
    "alpha" : 1, # dimensionless body scaler
    "C_N" : 2, # default = 2 # Drag coefficient
    "dt" : 0.01, # 1 = 1s
    "time_scaler": 1,
    "c1" : 6*10,
    "c2" : 0.2*(10**2),
    "c3" : 0.5*(10**2),
    "c4" : 10,
    "c5" : 30,
    "c6" : 30

}

########################################################################################################################################################################
# WORM ANIMATION CONFIGURATION #########################################################################################################################################
########################################################################################################################################################################
########################################################################################################################################################################
########################################################################################################################################################################

worm_dict_default = {
    
    "trail_point" : 0,
    "display_trail" : False,
    "trail_color" : 'lightgrey',
    "trail_width" : 0.5,
    "worm_seg_color" : 'black'
}